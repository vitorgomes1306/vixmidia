// Quando gerar o banco de dados com o postgress, o nome da tabela deve ser o mesmo nome do model.
// Caso contrário, o prisma não irá gerar o banco de dados.
//Quando gerar uma nova tabela, executar o comando: npx prisma migrate dev --name init

generator client {
  provider = "prisma-client-js"
}

datasource db {
      provider = "postgresql"
      url      = env("DATABASE_URL")
}

model User {
  id       Int      @id @default(autoincrement()) // Define que o id é a chave primária e que é autoincrementável
  name     String // Nome do usuário
  email    String   @unique // Define que o email é único
  password String 
  panels   Panel[] // Propriedade que Define que um usuário pode ter vários painéis
  dateCreated DateTime @default(now())
  dateUpdated DateTime @updatedAt @default(now())
  @@map("User")  // Mapear a tabela respeitando o case-sensitive do PostgreSQL
}

model Panel {
  id        Int      @id @default(autoincrement()) // Define que o id é a chave primária e que é autoincrementável
  name      String? // Nome do painel (opcional)
  userId    Int 
  user      User     @relation(fields: [userId], references: [id]) // Define que o usuario é a chave estrangeira na tabela Panel e reference define que o id é a chave primária na tabela User
  type      PanelType @default(FULL_SCREEN)  // Tipo de painel (tela cheia ou dividida)
  medias    PanelMedia[]
  devices   Device[]
}

model Media {
  id      Int       @id @default(autoincrement())
  title   String
  url     String?   // Opcional: porque alguns tipos (ex: weather) podem não precisar de URL
  type    MediaType
  panels  PanelMedia[]
}

model PanelMedia {
  panelId Int
  mediaId Int
  panel   Panel @relation(fields: [panelId], references: [id])
  media   Media @relation(fields: [mediaId], references: [id])

  @@id([panelId, mediaId])
}

model Device {
  id        Int    @id @default(autoincrement())
  name      String
  deviceKey String @unique
  panelId   Int
  panel     Panel  @relation(fields: [panelId], references: [id])
  type      String @default("TV")
  status    String @default("Ativo")
}

enum PanelType {
  FULL_SCREEN   // Tela cheia
  SPLIT_SCREEN  // Tela dividida
}

enum MediaType {
  PHOTO    // Foto
  VIDEO    // Vídeo
  RSS      // Notícias de feed RSS
  WEATHER  // Previsão do tempo
}